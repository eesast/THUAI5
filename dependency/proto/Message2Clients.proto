//Message2Clients
syntax = "proto3";
package Protobuf;
option csharp_namespace = "Communication.Proto";

import "MessageType.proto";

/*---------------------------------2021-10-1重写.proto---------------------------------------*/
/*---------------------------------2021-10-2更改 by TCL---------------------------------------*/
/*---------------------------------2021-10-15更改 by TCL---------------------------------------*/
/*---------------------------------2021-10-16更改 by TCL---------------------------------------*/

message MessageOfCharacter
{
    int32 x = 1;//可见
    int32 y = 2;//可见
    double attackRange = 3;//可见
    int32 bulletNum = 4;
    int32 speed = 5;//可见
    int32 life = 6;//可见
    double timeUntilCommonSkillAvailable = 7; //可见  
    double timeUntilUltimateSkillAvailable = 8;//这个可能用不到，因为可能只会有一个主动技能
    int32 gemNum = 9;//可见
    BuffType buff = 10;//可见
    PropType prop = 11;//可见
    PlaceType place = 12;//人物背景框颜色
    double vampire=13;//吸血率
    BulletType bulletType = 14;//子弹类型
    bool isResetting=15;//是否在复活中
    PassiveSkillType PassiveSkillType = 16;//可见 
    ActiveSkillType ActiveSkillType = 17;//可见
    int64 guid = 18;     //操作方法：Client和Server互相约定guid。非负整数中，1-8这8个guid预留给8个人物，其余在子弹或道具被创造/破坏时分发和回收。Client端用向量[guid]储存物体信息和对应的控件实例。
                        //0号guid存储单播模式中每人Client对应的GUID。
    bool canMove=19;
    int32 radius=20;
    int32 CD=21;
    int32 lifeNum = 22;		//第几次复活
    int32 score=23;
}

message MessageOfProp
{
    PropType type = 1;
    int32 x = 2;
    int32 y = 3;
    double facingDirection=4;
    int64 guid=5;
    int64 parentID=6;
    int32 size=7;  //宝石大小
}

message MessageOfBullet
{
    BulletType type = 1;
    int32 x=2;
    int32 y=3;
    double facingDirection=4;
    int64 guid=5;
    int64 parentID=6;
}

message MessageToInitialize 
{
    int32 MapSerial = 1; //应该是地图的编号
    MessageType messageType = 2;
}

//每帧server发给client的信息
message MessageToClient 
{
    message GameObjMessage
    {
        oneof obj
        {
            MessageOfCharacter messageOfCharacter = 1;
            MessageOfBullet messageOfBullet = 2;
            MessageOfProp messageOfProp = 3;
        }    
    }    
    repeated GameObjMessage gameObjMessage=1;
    MessageType messageType = 2;
}

message MessageToOneClient
{
    int64 playerID = 1;			//指明发送给谁
    int64 teamID = 2;			//指明发送给谁 
    MessageType messageType = 3;
    int64 guid = 4;             //自己的guid
    string message = 5;         //如果 messageType 为 Send，则为要发送的消息
} //继承自THUIAI4
//注：转换函数还没写好


//这些先弃用了↓


// //全设成int32了，麻烦逻辑组其他二位指正
// message MessageToAddInstance
// {
//     GameObjType instanceType= 1; //这里逻辑上只能写道具和子弹,Client也只准备了这两个实例的创建函数。
//                                  //人物在开始时通过BasicalCharacterProperty中的信息添加，无法手动添加。如果需要有添加草丛的操作，请联系我。
//     int32 guid = 2;            //要分配的guid。为防止重复分配，建议Server也写一个对应的vector。
//     oneof messageOfInstance    //根据instanceType决定消息类型
//     {
//         MessageOfProp messageOfProp= 3;
//         MessageOfBullet messageOfBullet= 4;
//     }
// }

// message MessageToDestroyInstance
// {
//     int32 guid = 1;
// }
// //拿到要销毁物体的guid后，Client端vector释放掉该guid位置的物体信息，并置为null回收该地址，同时删除该物品的对应控件句柄。
// //人物的guid无法被回收，死亡时颜色变为透明。任何试图将guid0和1-8删除的操作应被认定为非法。
// //子弹被销毁的同时会显示一个爆炸效果。饼：画圆

// message MessageToOperate
// {
//     bool operateKind = 1;
//     oneof messageOfOperation
//     {
//         MessageToAddInstance messageToAddInstance= 2;
//         MessageToDestroyInstance messageToDestroyInstance = 3;
//     }
// }