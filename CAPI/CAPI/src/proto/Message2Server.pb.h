// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MessageType.pb.h"
#include "Message2Clients.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message2Server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message2Server_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Server_2eproto;
namespace Protobuf {
class MessageToServer;
struct MessageToServerDefaultTypeInternal;
extern MessageToServerDefaultTypeInternal _MessageToServer_default_instance_;
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::Protobuf::MessageToServer* Arena::CreateMaybeMessage<::Protobuf::MessageToServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protobuf {

// ===================================================================

class MessageToServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.MessageToServer) */ {
 public:
  inline MessageToServer() : MessageToServer(nullptr) {}
  ~MessageToServer() override;
  explicit constexpr MessageToServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageToServer(const MessageToServer& from);
  MessageToServer(MessageToServer&& from) noexcept
    : MessageToServer() {
    *this = ::std::move(from);
  }

  inline MessageToServer& operator=(const MessageToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageToServer& operator=(MessageToServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageToServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageToServer* internal_default_instance() {
    return reinterpret_cast<const MessageToServer*>(
               &_MessageToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageToServer& a, MessageToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageToServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageToServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageToServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageToServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageToServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageToServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.MessageToServer";
  }
  protected:
  explicit MessageToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 8,
    kPlayerIDFieldNumber = 2,
    kMessageTypeFieldNumber = 1,
    kPropTypeFieldNumber = 4,
    kTeamIDFieldNumber = 3,
    kTimeInMillisecondsFieldNumber = 5,
    kAngleFieldNumber = 6,
    kToPlayerIDFieldNumber = 7,
    kPSkillFieldNumber = 9,
    kASkill1FieldNumber = 10,
    kASkill2FieldNumber = 11,
  };
  // string message = 8;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 playerID = 2;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // .Protobuf.MessageType messageType = 1;
  void clear_messagetype();
  ::Protobuf::MessageType messagetype() const;
  void set_messagetype(::Protobuf::MessageType value);
  private:
  ::Protobuf::MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::Protobuf::MessageType value);
  public:

  // .Protobuf.PropType propType = 4;
  void clear_proptype();
  ::Protobuf::PropType proptype() const;
  void set_proptype(::Protobuf::PropType value);
  private:
  ::Protobuf::PropType _internal_proptype() const;
  void _internal_set_proptype(::Protobuf::PropType value);
  public:

  // int64 teamID = 3;
  void clear_teamid();
  int64_t teamid() const;
  void set_teamid(int64_t value);
  private:
  int64_t _internal_teamid() const;
  void _internal_set_teamid(int64_t value);
  public:

  // int64 timeInMilliseconds = 5;
  void clear_timeinmilliseconds();
  int64_t timeinmilliseconds() const;
  void set_timeinmilliseconds(int64_t value);
  private:
  int64_t _internal_timeinmilliseconds() const;
  void _internal_set_timeinmilliseconds(int64_t value);
  public:

  // double angle = 6;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // int64 ToPlayerID = 7;
  void clear_toplayerid();
  int64_t toplayerid() const;
  void set_toplayerid(int64_t value);
  private:
  int64_t _internal_toplayerid() const;
  void _internal_set_toplayerid(int64_t value);
  public:

  // .Protobuf.PassiveSkillType pSkill = 9;
  void clear_pskill();
  ::Protobuf::PassiveSkillType pskill() const;
  void set_pskill(::Protobuf::PassiveSkillType value);
  private:
  ::Protobuf::PassiveSkillType _internal_pskill() const;
  void _internal_set_pskill(::Protobuf::PassiveSkillType value);
  public:

  // .Protobuf.ActiveSkillType aSkill1 = 10;
  void clear_askill1();
  ::Protobuf::ActiveSkillType askill1() const;
  void set_askill1(::Protobuf::ActiveSkillType value);
  private:
  ::Protobuf::ActiveSkillType _internal_askill1() const;
  void _internal_set_askill1(::Protobuf::ActiveSkillType value);
  public:

  // .Protobuf.ActiveSkillType aSkill2 = 11;
  void clear_askill2();
  ::Protobuf::ActiveSkillType askill2() const;
  void set_askill2(::Protobuf::ActiveSkillType value);
  private:
  ::Protobuf::ActiveSkillType _internal_askill2() const;
  void _internal_set_askill2(::Protobuf::ActiveSkillType value);
  public:

  // @@protoc_insertion_point(class_scope:Protobuf.MessageToServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t playerid_;
  int messagetype_;
  int proptype_;
  int64_t teamid_;
  int64_t timeinmilliseconds_;
  double angle_;
  int64_t toplayerid_;
  int pskill_;
  int askill1_;
  int askill2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message2Server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageToServer

// .Protobuf.MessageType messageType = 1;
inline void MessageToServer::clear_messagetype() {
  messagetype_ = 0;
}
inline ::Protobuf::MessageType MessageToServer::_internal_messagetype() const {
  return static_cast< ::Protobuf::MessageType >(messagetype_);
}
inline ::Protobuf::MessageType MessageToServer::messagetype() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.messageType)
  return _internal_messagetype();
}
inline void MessageToServer::_internal_set_messagetype(::Protobuf::MessageType value) {
  
  messagetype_ = value;
}
inline void MessageToServer::set_messagetype(::Protobuf::MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.messageType)
}

// int64 playerID = 2;
inline void MessageToServer::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t MessageToServer::_internal_playerid() const {
  return playerid_;
}
inline int64_t MessageToServer::playerid() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.playerID)
  return _internal_playerid();
}
inline void MessageToServer::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void MessageToServer::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.playerID)
}

// int64 teamID = 3;
inline void MessageToServer::clear_teamid() {
  teamid_ = int64_t{0};
}
inline int64_t MessageToServer::_internal_teamid() const {
  return teamid_;
}
inline int64_t MessageToServer::teamid() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.teamID)
  return _internal_teamid();
}
inline void MessageToServer::_internal_set_teamid(int64_t value) {
  
  teamid_ = value;
}
inline void MessageToServer::set_teamid(int64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.teamID)
}

// .Protobuf.PropType propType = 4;
inline void MessageToServer::clear_proptype() {
  proptype_ = 0;
}
inline ::Protobuf::PropType MessageToServer::_internal_proptype() const {
  return static_cast< ::Protobuf::PropType >(proptype_);
}
inline ::Protobuf::PropType MessageToServer::proptype() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.propType)
  return _internal_proptype();
}
inline void MessageToServer::_internal_set_proptype(::Protobuf::PropType value) {
  
  proptype_ = value;
}
inline void MessageToServer::set_proptype(::Protobuf::PropType value) {
  _internal_set_proptype(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.propType)
}

// int64 timeInMilliseconds = 5;
inline void MessageToServer::clear_timeinmilliseconds() {
  timeinmilliseconds_ = int64_t{0};
}
inline int64_t MessageToServer::_internal_timeinmilliseconds() const {
  return timeinmilliseconds_;
}
inline int64_t MessageToServer::timeinmilliseconds() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.timeInMilliseconds)
  return _internal_timeinmilliseconds();
}
inline void MessageToServer::_internal_set_timeinmilliseconds(int64_t value) {
  
  timeinmilliseconds_ = value;
}
inline void MessageToServer::set_timeinmilliseconds(int64_t value) {
  _internal_set_timeinmilliseconds(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.timeInMilliseconds)
}

// double angle = 6;
inline void MessageToServer::clear_angle() {
  angle_ = 0;
}
inline double MessageToServer::_internal_angle() const {
  return angle_;
}
inline double MessageToServer::angle() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.angle)
  return _internal_angle();
}
inline void MessageToServer::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void MessageToServer::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.angle)
}

// int64 ToPlayerID = 7;
inline void MessageToServer::clear_toplayerid() {
  toplayerid_ = int64_t{0};
}
inline int64_t MessageToServer::_internal_toplayerid() const {
  return toplayerid_;
}
inline int64_t MessageToServer::toplayerid() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.ToPlayerID)
  return _internal_toplayerid();
}
inline void MessageToServer::_internal_set_toplayerid(int64_t value) {
  
  toplayerid_ = value;
}
inline void MessageToServer::set_toplayerid(int64_t value) {
  _internal_set_toplayerid(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.ToPlayerID)
}

// string message = 8;
inline void MessageToServer::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& MessageToServer::message() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageToServer::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.message)
}
inline std::string* MessageToServer::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Protobuf.MessageToServer.message)
  return _s;
}
inline const std::string& MessageToServer::_internal_message() const {
  return message_.Get();
}
inline void MessageToServer::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageToServer::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageToServer::release_message() {
  // @@protoc_insertion_point(field_release:Protobuf.MessageToServer.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageToServer::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToServer.message)
}

// .Protobuf.PassiveSkillType pSkill = 9;
inline void MessageToServer::clear_pskill() {
  pskill_ = 0;
}
inline ::Protobuf::PassiveSkillType MessageToServer::_internal_pskill() const {
  return static_cast< ::Protobuf::PassiveSkillType >(pskill_);
}
inline ::Protobuf::PassiveSkillType MessageToServer::pskill() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.pSkill)
  return _internal_pskill();
}
inline void MessageToServer::_internal_set_pskill(::Protobuf::PassiveSkillType value) {
  
  pskill_ = value;
}
inline void MessageToServer::set_pskill(::Protobuf::PassiveSkillType value) {
  _internal_set_pskill(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.pSkill)
}

// .Protobuf.ActiveSkillType aSkill1 = 10;
inline void MessageToServer::clear_askill1() {
  askill1_ = 0;
}
inline ::Protobuf::ActiveSkillType MessageToServer::_internal_askill1() const {
  return static_cast< ::Protobuf::ActiveSkillType >(askill1_);
}
inline ::Protobuf::ActiveSkillType MessageToServer::askill1() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.aSkill1)
  return _internal_askill1();
}
inline void MessageToServer::_internal_set_askill1(::Protobuf::ActiveSkillType value) {
  
  askill1_ = value;
}
inline void MessageToServer::set_askill1(::Protobuf::ActiveSkillType value) {
  _internal_set_askill1(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.aSkill1)
}

// .Protobuf.ActiveSkillType aSkill2 = 11;
inline void MessageToServer::clear_askill2() {
  askill2_ = 0;
}
inline ::Protobuf::ActiveSkillType MessageToServer::_internal_askill2() const {
  return static_cast< ::Protobuf::ActiveSkillType >(askill2_);
}
inline ::Protobuf::ActiveSkillType MessageToServer::askill2() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.aSkill2)
  return _internal_askill2();
}
inline void MessageToServer::_internal_set_askill2(::Protobuf::ActiveSkillType value) {
  
  askill2_ = value;
}
inline void MessageToServer::set_askill2(::Protobuf::ActiveSkillType value) {
  _internal_set_askill2(value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.aSkill2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto
