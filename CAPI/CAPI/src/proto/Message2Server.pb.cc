// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Server.proto

#include "Message2Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protobuf {
constexpr MessageToServer::MessageToServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playerid_(int64_t{0})
  , messagetype_(0)

  , proptype_(0)

  , teamid_(int64_t{0})
  , timeinmilliseconds_(int64_t{0})
  , angle_(0)
  , toplayerid_(int64_t{0})
  , pskill_(0)

  , askill1_(0)

  , askill2_(0)
{}
struct MessageToServerDefaultTypeInternal {
  constexpr MessageToServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageToServerDefaultTypeInternal() {}
  union {
    MessageToServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageToServerDefaultTypeInternal _MessageToServer_default_instance_;
}  // namespace Protobuf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Message2Server_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Message2Server_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Message2Server_2eproto = nullptr;

const uint32_t TableStruct_Message2Server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, messagetype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, teamid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, proptype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, timeinmilliseconds_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, angle_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, toplayerid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, message_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, pskill_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, askill1_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, askill2_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protobuf::MessageToServer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToServer_default_instance_),
};

const char descriptor_table_protodef_Message2Server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024Message2Server.proto\022\010Protobuf\032\021Messag"
  "eType.proto\032\025Message2Clients.proto\"\331\002\n\017M"
  "essageToServer\022*\n\013messageType\030\001 \001(\0162\025.Pr"
  "otobuf.MessageType\022\020\n\010playerID\030\002 \001(\003\022\016\n\006"
  "teamID\030\003 \001(\003\022$\n\010propType\030\004 \001(\0162\022.Protobu"
  "f.PropType\022\032\n\022timeInMilliseconds\030\005 \001(\003\022\r"
  "\n\005angle\030\006 \001(\001\022\022\n\nToPlayerID\030\007 \001(\003\022\017\n\007mes"
  "sage\030\010 \001(\t\022*\n\006pSkill\030\t \001(\0162\032.Protobuf.Pa"
  "ssiveSkillType\022*\n\007aSkill1\030\n \001(\0162\031.Protob"
  "uf.ActiveSkillType\022*\n\007aSkill2\030\013 \001(\0162\031.Pr"
  "otobuf.ActiveSkillTypeB\026\252\002\023Communication"
  ".Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Message2Server_2eproto_deps[2] = {
  &::descriptor_table_Message2Clients_2eproto,
  &::descriptor_table_MessageType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Message2Server_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Server_2eproto = {
  false, false, 454, descriptor_table_protodef_Message2Server_2eproto, "Message2Server.proto", 
  &descriptor_table_Message2Server_2eproto_once, descriptor_table_Message2Server_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_Message2Server_2eproto::offsets,
  file_level_metadata_Message2Server_2eproto, file_level_enum_descriptors_Message2Server_2eproto, file_level_service_descriptors_Message2Server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Message2Server_2eproto_getter() {
  return &descriptor_table_Message2Server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Message2Server_2eproto(&descriptor_table_Message2Server_2eproto);
namespace Protobuf {

// ===================================================================

class MessageToServer::_Internal {
 public:
};

MessageToServer::MessageToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageToServer)
}
MessageToServer::MessageToServer(const MessageToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&askill2_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(askill2_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToServer)
}

inline void MessageToServer::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&askill2_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(askill2_));
}

MessageToServer::~MessageToServer() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToServer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageToServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageToServer::ArenaDtor(void* object) {
  MessageToServer* _this = reinterpret_cast< MessageToServer* >(object);
  (void)_this;
}
void MessageToServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&askill2_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(askill2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::Protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 teamID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.PropType propType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proptype(static_cast<::Protobuf::PropType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 timeInMilliseconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timeinmilliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 ToPlayerID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          toplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protobuf.MessageToServer.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.PassiveSkillType pSkill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pskill(static_cast<::Protobuf::PassiveSkillType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.ActiveSkillType aSkill1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_askill1(static_cast<::Protobuf::ActiveSkillType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.ActiveSkillType aSkill2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_askill2(static_cast<::Protobuf::ActiveSkillType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // int64 playerID = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_playerid(), target);
  }

  // int64 teamID = 3;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_teamid(), target);
  }

  // .Protobuf.PropType propType = 4;
  if (this->_internal_proptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_proptype(), target);
  }

  // int64 timeInMilliseconds = 5;
  if (this->_internal_timeinmilliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timeinmilliseconds(), target);
  }

  // double angle = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_angle(), target);
  }

  // int64 ToPlayerID = 7;
  if (this->_internal_toplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_toplayerid(), target);
  }

  // string message = 8;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protobuf.MessageToServer.message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message(), target);
  }

  // .Protobuf.PassiveSkillType pSkill = 9;
  if (this->_internal_pskill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_pskill(), target);
  }

  // .Protobuf.ActiveSkillType aSkill1 = 10;
  if (this->_internal_askill1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_askill1(), target);
  }

  // .Protobuf.ActiveSkillType aSkill2 = 11;
  if (this->_internal_askill2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_askill2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToServer)
  return target;
}

size_t MessageToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 8;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 playerID = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // .Protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // .Protobuf.PropType propType = 4;
  if (this->_internal_proptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_proptype());
  }

  // int64 teamID = 3;
  if (this->_internal_teamid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_teamid());
  }

  // int64 timeInMilliseconds = 5;
  if (this->_internal_timeinmilliseconds() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timeinmilliseconds());
  }

  // double angle = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 8;
  }

  // int64 ToPlayerID = 7;
  if (this->_internal_toplayerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_toplayerid());
  }

  // .Protobuf.PassiveSkillType pSkill = 9;
  if (this->_internal_pskill() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pskill());
  }

  // .Protobuf.ActiveSkillType aSkill1 = 10;
  if (this->_internal_askill1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_askill1());
  }

  // .Protobuf.ActiveSkillType aSkill2 = 11;
  if (this->_internal_askill2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_askill2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageToServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToServer::GetClassData() const { return &_class_data_; }

void MessageToServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageToServer *>(to)->MergeFrom(
      static_cast<const MessageToServer &>(from));
}


void MessageToServer::MergeFrom(const MessageToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToServer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  if (from._internal_proptype() != 0) {
    _internal_set_proptype(from._internal_proptype());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_timeinmilliseconds() != 0) {
    _internal_set_timeinmilliseconds(from._internal_timeinmilliseconds());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = from._internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from._internal_toplayerid() != 0) {
    _internal_set_toplayerid(from._internal_toplayerid());
  }
  if (from._internal_pskill() != 0) {
    _internal_set_pskill(from._internal_pskill());
  }
  if (from._internal_askill1() != 0) {
    _internal_set_askill1(from._internal_askill1());
  }
  if (from._internal_askill2() != 0) {
    _internal_set_askill2(from._internal_askill2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToServer::CopyFrom(const MessageToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToServer::IsInitialized() const {
  return true;
}

void MessageToServer::InternalSwap(MessageToServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageToServer, askill2_)
      + sizeof(MessageToServer::askill2_)
      - PROTOBUF_FIELD_OFFSET(MessageToServer, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once,
      file_level_metadata_Message2Server_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToServer* Arena::CreateMaybeMessage< ::Protobuf::MessageToServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageToServer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
