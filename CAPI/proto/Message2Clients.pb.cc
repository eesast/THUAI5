// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Clients.proto

#include "Message2Clients.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protobuf {
constexpr MessageOfCharacter::MessageOfCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buff_()
  , _buff_cached_byte_size_(0)
  , x_(0)
  , y_(0)
  , attackrange_(0)
  , bulletnum_(0)
  , speed_(0)
  , timeuntilcommonskillavailable_(0)
  , life_(0)
  , gemnum_(0)
  , timeuntilultimateskillavailable_(0)
  , facingdirection_(0)
  , prop_(0)

  , place_(0)

  , vampire_(0)
  , bullettype_(0)

  , passiveskilltype_(0)

  , guid_(int64_t{0})
  , activeskilltype_(0)

  , radius_(0)
  , isresetting_(false)
  , canmove_(false)
  , isinvisible_(false)
  , cd_(0)
  , lifenum_(0)
  , score_(0)
  , teamid_(int64_t{0})
  , playerid_(int64_t{0}){}
struct MessageOfCharacterDefaultTypeInternal {
  constexpr MessageOfCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageOfCharacterDefaultTypeInternal() {}
  union {
    MessageOfCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageOfCharacterDefaultTypeInternal _MessageOfCharacter_default_instance_;
constexpr MessageOfProp::MessageOfProp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , x_(0)
  , facingdirection_(0)
  , y_(0)
  , size_(0)
  , guid_(int64_t{0})
  , place_(0)

  , ismoving_(false){}
struct MessageOfPropDefaultTypeInternal {
  constexpr MessageOfPropDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageOfPropDefaultTypeInternal() {}
  union {
    MessageOfProp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageOfPropDefaultTypeInternal _MessageOfProp_default_instance_;
constexpr MessageOfBullet::MessageOfBullet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , x_(0)
  , facingdirection_(0)
  , guid_(int64_t{0})
  , y_(0)
  , place_(0)

  , parentteamid_(int64_t{0})
  , bombrange_(0){}
struct MessageOfBulletDefaultTypeInternal {
  constexpr MessageOfBulletDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageOfBulletDefaultTypeInternal() {}
  union {
    MessageOfBullet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageOfBulletDefaultTypeInternal _MessageOfBullet_default_instance_;
constexpr MessageOfBombedBullet::MessageOfBombedBullet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , x_(0)
  , facingdirection_(0)
  , mappingid_(int64_t{0})
  , bombrange_(0)
  , y_(0){}
struct MessageOfBombedBulletDefaultTypeInternal {
  constexpr MessageOfBombedBulletDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageOfBombedBulletDefaultTypeInternal() {}
  union {
    MessageOfBombedBullet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageOfBombedBulletDefaultTypeInternal _MessageOfBombedBullet_default_instance_;
constexpr MessageOfPickedProp::MessageOfPickedProp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , x_(0)
  , facingdirection_(0)
  , mappingid_(int64_t{0})
  , y_(0){}
struct MessageOfPickedPropDefaultTypeInternal {
  constexpr MessageOfPickedPropDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageOfPickedPropDefaultTypeInternal() {}
  union {
    MessageOfPickedProp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageOfPickedPropDefaultTypeInternal _MessageOfPickedProp_default_instance_;
constexpr MessageOfMap_Row::MessageOfMap_Row(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : col_()
  , _col_cached_byte_size_(0){}
struct MessageOfMap_RowDefaultTypeInternal {
  constexpr MessageOfMap_RowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageOfMap_RowDefaultTypeInternal() {}
  union {
    MessageOfMap_Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageOfMap_RowDefaultTypeInternal _MessageOfMap_Row_default_instance_;
constexpr MessageOfMap::MessageOfMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_(){}
struct MessageOfMapDefaultTypeInternal {
  constexpr MessageOfMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageOfMapDefaultTypeInternal() {}
  union {
    MessageOfMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageOfMapDefaultTypeInternal _MessageOfMap_default_instance_;
constexpr MessageToClient_GameObjMessage::MessageToClient_GameObjMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MessageToClient_GameObjMessageDefaultTypeInternal {
  constexpr MessageToClient_GameObjMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageToClient_GameObjMessageDefaultTypeInternal() {}
  union {
    MessageToClient_GameObjMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageToClient_GameObjMessageDefaultTypeInternal _MessageToClient_GameObjMessage_default_instance_;
constexpr MessageToClient::MessageToClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameobjmessage_()
  , messagetype_(0)
{}
struct MessageToClientDefaultTypeInternal {
  constexpr MessageToClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageToClientDefaultTypeInternal() {}
  union {
    MessageToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
constexpr MessageToOneClient::MessageToOneClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playerid_(int64_t{0})
  , teamid_(int64_t{0})
  , guid_(int64_t{0})
  , messagetype_(0)
{}
struct MessageToOneClientDefaultTypeInternal {
  constexpr MessageToOneClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageToOneClientDefaultTypeInternal() {}
  union {
    MessageToOneClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageToOneClientDefaultTypeInternal _MessageToOneClient_default_instance_;
}  // namespace Protobuf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Message2Clients_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Message2Clients_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Message2Clients_2eproto = nullptr;

const uint32_t TableStruct_Message2Clients_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, x_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, y_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, attackrange_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, bulletnum_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, speed_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, life_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, timeuntilcommonskillavailable_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, timeuntilultimateskillavailable_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, gemnum_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, facingdirection_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, prop_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, place_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, vampire_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, bullettype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, isresetting_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, passiveskilltype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, activeskilltype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, guid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, canmove_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, radius_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, cd_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, lifenum_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, score_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, teamid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, isinvisible_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfCharacter, buff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, type_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, x_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, y_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, facingdirection_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, guid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, size_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, place_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfProp, ismoving_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, type_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, x_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, y_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, facingdirection_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, guid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, parentteamid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, place_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBullet, bombrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBombedBullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBombedBullet, type_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBombedBullet, x_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBombedBullet, y_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBombedBullet, facingdirection_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBombedBullet, mappingid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfBombedBullet, bombrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfPickedProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfPickedProp, type_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfPickedProp, x_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfPickedProp, y_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfPickedProp, facingdirection_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfPickedProp, mappingid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfMap_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfMap_Row, col_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageOfMap, row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_GameObjMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_GameObjMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_GameObjMessage, obj_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, gameobjmessage_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, messagetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, teamid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, messagetype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, guid_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToOneClient, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protobuf::MessageOfCharacter)},
  { 33, -1, -1, sizeof(::Protobuf::MessageOfProp)},
  { 47, -1, -1, sizeof(::Protobuf::MessageOfBullet)},
  { 61, -1, -1, sizeof(::Protobuf::MessageOfBombedBullet)},
  { 73, -1, -1, sizeof(::Protobuf::MessageOfPickedProp)},
  { 84, -1, -1, sizeof(::Protobuf::MessageOfMap_Row)},
  { 91, -1, -1, sizeof(::Protobuf::MessageOfMap)},
  { 98, -1, -1, sizeof(::Protobuf::MessageToClient_GameObjMessage)},
  { 111, -1, -1, sizeof(::Protobuf::MessageToClient)},
  { 119, -1, -1, sizeof(::Protobuf::MessageToOneClient)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageOfCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageOfProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageOfBullet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageOfBombedBullet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageOfPickedProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageOfMap_Row_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageOfMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToClient_GameObjMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToOneClient_default_instance_),
};

const char descriptor_table_protodef_Message2Clients_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Message2Clients.proto\022\010Protobuf\032\021Messa"
  "geType.proto\"\234\005\n\022MessageOfCharacter\022\t\n\001x"
  "\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\023\n\013attackRange\030\003 \001(\001\022\021"
  "\n\tbulletNum\030\004 \001(\005\022\r\n\005speed\030\005 \001(\005\022\014\n\004life"
  "\030\006 \001(\005\022%\n\035timeUntilCommonSkillAvailable\030"
  "\007 \001(\001\022\'\n\037timeUntilUltimateSkillAvailable"
  "\030\010 \001(\001\022\016\n\006gemNum\030\t \001(\005\022\027\n\017facingDirectio"
  "n\030\n \001(\001\022 \n\004prop\030\013 \001(\0162\022.Protobuf.PropTyp"
  "e\022\"\n\005place\030\014 \001(\0162\023.Protobuf.PlaceType\022\017\n"
  "\007vampire\030\r \001(\001\022(\n\nbulletType\030\016 \001(\0162\024.Pro"
  "tobuf.BulletType\022\023\n\013isResetting\030\017 \001(\010\0224\n"
  "\020PassiveSkillType\030\020 \001(\0162\032.Protobuf.Passi"
  "veSkillType\0222\n\017ActiveSkillType\030\021 \001(\0162\031.P"
  "rotobuf.ActiveSkillType\022\014\n\004guid\030\022 \001(\003\022\017\n"
  "\007canMove\030\023 \001(\010\022\016\n\006radius\030\024 \001(\005\022\n\n\002CD\030\025 \001"
  "(\005\022\017\n\007lifeNum\030\026 \001(\005\022\r\n\005score\030\027 \001(\005\022\016\n\006te"
  "amID\030\030 \001(\003\022\020\n\010playerID\030\031 \001(\003\022\023\n\013isInvisi"
  "ble\030\032 \001(\010\022 \n\004buff\030\033 \003(\0162\022.Protobuf.BuffT"
  "ype\"\262\001\n\rMessageOfProp\022 \n\004type\030\001 \001(\0162\022.Pr"
  "otobuf.PropType\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\027\n"
  "\017facingDirection\030\004 \001(\001\022\014\n\004guid\030\005 \001(\003\022\014\n\004"
  "size\030\006 \001(\005\022\"\n\005place\030\007 \001(\0162\023.Protobuf.Pla"
  "ceType\022\020\n\010isMoving\030\010 \001(\010\"\277\001\n\017MessageOfBu"
  "llet\022\"\n\004type\030\001 \001(\0162\024.Protobuf.BulletType"
  "\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\027\n\017facingDirectio"
  "n\030\004 \001(\001\022\014\n\004guid\030\005 \001(\003\022\024\n\014parentTeamID\030\006 "
  "\001(\003\022\"\n\005place\030\007 \001(\0162\023.Protobuf.PlaceType\022"
  "\021\n\tbombRange\030\010 \001(\001\"\220\001\n\025MessageOfBombedBu"
  "llet\022\"\n\004type\030\001 \001(\0162\024.Protobuf.BulletType"
  "\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\027\n\017facingDirectio"
  "n\030\004 \001(\001\022\021\n\tmappingID\030\005 \001(\003\022\021\n\tbombRange\030"
  "\006 \001(\001\"y\n\023MessageOfPickedProp\022 \n\004type\030\001 \001"
  "(\0162\022.Protobuf.PropType\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003"
  " \001(\005\022\027\n\017facingDirection\030\004 \001(\001\022\021\n\tmapping"
  "ID\030\005 \001(\003\"K\n\014MessageOfMap\022\'\n\003row\0303 \003(\0132\032."
  "Protobuf.MessageOfMap.Row\032\022\n\003Row\022\013\n\003col\030"
  "\001 \003(\005\"\355\003\n\017MessageToClient\022@\n\016gameObjMess"
  "age\030\001 \003(\0132(.Protobuf.MessageToClient.Gam"
  "eObjMessage\022*\n\013messageType\030\002 \001(\0162\025.Proto"
  "buf.MessageType\032\353\002\n\016GameObjMessage\022:\n\022me"
  "ssageOfCharacter\030\001 \001(\0132\034.Protobuf.Messag"
  "eOfCharacterH\000\0224\n\017messageOfBullet\030\002 \001(\0132"
  "\031.Protobuf.MessageOfBulletH\000\0220\n\rmessageO"
  "fProp\030\003 \001(\0132\027.Protobuf.MessageOfPropH\000\022."
  "\n\014messageOfMap\030\004 \001(\0132\026.Protobuf.MessageO"
  "fMapH\000\022@\n\025MessageOfBombedBullet\030\005 \001(\0132\037."
  "Protobuf.MessageOfBombedBulletH\000\022<\n\023mess"
  "ageOfPickedProp\030\006 \001(\0132\035.Protobuf.Message"
  "OfPickedPropH\000B\005\n\003obj\"\201\001\n\022MessageToOneCl"
  "ient\022\020\n\010playerID\030\001 \001(\003\022\016\n\006teamID\030\002 \001(\003\022*"
  "\n\013messageType\030\003 \001(\0162\025.Protobuf.MessageTy"
  "pe\022\014\n\004guid\030\004 \001(\003\022\017\n\007message\030\005 \001(\tB\026\252\002\023Co"
  "mmunication.Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Message2Clients_2eproto_deps[1] = {
  &::descriptor_table_MessageType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Message2Clients_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Clients_2eproto = {
  false, false, 2105, descriptor_table_protodef_Message2Clients_2eproto, "Message2Clients.proto", 
  &descriptor_table_Message2Clients_2eproto_once, descriptor_table_Message2Clients_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_Message2Clients_2eproto::offsets,
  file_level_metadata_Message2Clients_2eproto, file_level_enum_descriptors_Message2Clients_2eproto, file_level_service_descriptors_Message2Clients_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Message2Clients_2eproto_getter() {
  return &descriptor_table_Message2Clients_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Message2Clients_2eproto(&descriptor_table_Message2Clients_2eproto);
namespace Protobuf {

// ===================================================================

class MessageOfCharacter::_Internal {
 public:
};

MessageOfCharacter::MessageOfCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buff_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageOfCharacter)
}
MessageOfCharacter::MessageOfCharacter(const MessageOfCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buff_(from.buff_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageOfCharacter)
}

inline void MessageOfCharacter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(playerid_));
}

MessageOfCharacter::~MessageOfCharacter() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageOfCharacter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageOfCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfCharacter::ArenaDtor(void* object) {
  MessageOfCharacter* _this = reinterpret_cast< MessageOfCharacter* >(object);
  (void)_this;
}
void MessageOfCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOfCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageOfCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageOfCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_.Clear();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&x_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double attackRange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          attackrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 bulletNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bulletnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 life = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double timeUntilCommonSkillAvailable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          timeuntilcommonskillavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double timeUntilUltimateSkillAvailable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          timeuntilultimateskillavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 gemNum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          gemnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double facingDirection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          facingdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.PropType prop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_prop(static_cast<::Protobuf::PropType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.PlaceType place = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_place(static_cast<::Protobuf::PlaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // double vampire = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          vampire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.BulletType bulletType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bullettype(static_cast<::Protobuf::BulletType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool isResetting = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          isresetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.PassiveSkillType PassiveSkillType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_passiveskilltype(static_cast<::Protobuf::PassiveSkillType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.ActiveSkillType ActiveSkillType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_activeskilltype(static_cast<::Protobuf::ActiveSkillType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 guid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool canMove = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          canmove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 radius = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CD = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          cd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lifeNum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          lifenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 score = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 teamID = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 playerID = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isInvisible = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          isinvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protobuf.BuffType buff = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_buff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 216) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_buff(static_cast<::Protobuf::BuffType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageOfCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // double attackRange = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_attackrange = this->_internal_attackrange();
  uint64_t raw_attackrange;
  memcpy(&raw_attackrange, &tmp_attackrange, sizeof(tmp_attackrange));
  if (raw_attackrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_attackrange(), target);
  }

  // int32 bulletNum = 4;
  if (this->_internal_bulletnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bulletnum(), target);
  }

  // int32 speed = 5;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_speed(), target);
  }

  // int32 life = 6;
  if (this->_internal_life() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_life(), target);
  }

  // double timeUntilCommonSkillAvailable = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntilcommonskillavailable = this->_internal_timeuntilcommonskillavailable();
  uint64_t raw_timeuntilcommonskillavailable;
  memcpy(&raw_timeuntilcommonskillavailable, &tmp_timeuntilcommonskillavailable, sizeof(tmp_timeuntilcommonskillavailable));
  if (raw_timeuntilcommonskillavailable != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_timeuntilcommonskillavailable(), target);
  }

  // double timeUntilUltimateSkillAvailable = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntilultimateskillavailable = this->_internal_timeuntilultimateskillavailable();
  uint64_t raw_timeuntilultimateskillavailable;
  memcpy(&raw_timeuntilultimateskillavailable, &tmp_timeuntilultimateskillavailable, sizeof(tmp_timeuntilultimateskillavailable));
  if (raw_timeuntilultimateskillavailable != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_timeuntilultimateskillavailable(), target);
  }

  // int32 gemNum = 9;
  if (this->_internal_gemnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_gemnum(), target);
  }

  // double facingDirection = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_facingdirection(), target);
  }

  // .Protobuf.PropType prop = 11;
  if (this->_internal_prop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_prop(), target);
  }

  // .Protobuf.PlaceType place = 12;
  if (this->_internal_place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_place(), target);
  }

  // double vampire = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vampire = this->_internal_vampire();
  uint64_t raw_vampire;
  memcpy(&raw_vampire, &tmp_vampire, sizeof(tmp_vampire));
  if (raw_vampire != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_vampire(), target);
  }

  // .Protobuf.BulletType bulletType = 14;
  if (this->_internal_bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_bullettype(), target);
  }

  // bool isResetting = 15;
  if (this->_internal_isresetting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_isresetting(), target);
  }

  // .Protobuf.PassiveSkillType PassiveSkillType = 16;
  if (this->_internal_passiveskilltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_passiveskilltype(), target);
  }

  // .Protobuf.ActiveSkillType ActiveSkillType = 17;
  if (this->_internal_activeskilltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_activeskilltype(), target);
  }

  // int64 guid = 18;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_guid(), target);
  }

  // bool canMove = 19;
  if (this->_internal_canmove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_canmove(), target);
  }

  // int32 radius = 20;
  if (this->_internal_radius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_radius(), target);
  }

  // int32 CD = 21;
  if (this->_internal_cd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_cd(), target);
  }

  // int32 lifeNum = 22;
  if (this->_internal_lifenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_lifenum(), target);
  }

  // int32 score = 23;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_score(), target);
  }

  // int64 teamID = 24;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_teamid(), target);
  }

  // int64 playerID = 25;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->_internal_playerid(), target);
  }

  // bool isInvisible = 26;
  if (this->_internal_isinvisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_isinvisible(), target);
  }

  // repeated .Protobuf.BuffType buff = 27;
  {
    int byte_size = _buff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          27, buff_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageOfCharacter)
  return target;
}

size_t MessageOfCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageOfCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protobuf.BuffType buff = 27;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_buff_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_buff(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // double attackRange = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_attackrange = this->_internal_attackrange();
  uint64_t raw_attackrange;
  memcpy(&raw_attackrange, &tmp_attackrange, sizeof(tmp_attackrange));
  if (raw_attackrange != 0) {
    total_size += 1 + 8;
  }

  // int32 bulletNum = 4;
  if (this->_internal_bulletnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bulletnum());
  }

  // int32 speed = 5;
  if (this->_internal_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
  }

  // double timeUntilCommonSkillAvailable = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntilcommonskillavailable = this->_internal_timeuntilcommonskillavailable();
  uint64_t raw_timeuntilcommonskillavailable;
  memcpy(&raw_timeuntilcommonskillavailable, &tmp_timeuntilcommonskillavailable, sizeof(tmp_timeuntilcommonskillavailable));
  if (raw_timeuntilcommonskillavailable != 0) {
    total_size += 1 + 8;
  }

  // int32 life = 6;
  if (this->_internal_life() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_life());
  }

  // int32 gemNum = 9;
  if (this->_internal_gemnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gemnum());
  }

  // double timeUntilUltimateSkillAvailable = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntilultimateskillavailable = this->_internal_timeuntilultimateskillavailable();
  uint64_t raw_timeuntilultimateskillavailable;
  memcpy(&raw_timeuntilultimateskillavailable, &tmp_timeuntilultimateskillavailable, sizeof(tmp_timeuntilultimateskillavailable));
  if (raw_timeuntilultimateskillavailable != 0) {
    total_size += 1 + 8;
  }

  // double facingDirection = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    total_size += 1 + 8;
  }

  // .Protobuf.PropType prop = 11;
  if (this->_internal_prop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_prop());
  }

  // .Protobuf.PlaceType place = 12;
  if (this->_internal_place() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_place());
  }

  // double vampire = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vampire = this->_internal_vampire();
  uint64_t raw_vampire;
  memcpy(&raw_vampire, &tmp_vampire, sizeof(tmp_vampire));
  if (raw_vampire != 0) {
    total_size += 1 + 8;
  }

  // .Protobuf.BulletType bulletType = 14;
  if (this->_internal_bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bullettype());
  }

  // .Protobuf.PassiveSkillType PassiveSkillType = 16;
  if (this->_internal_passiveskilltype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_passiveskilltype());
  }

  // int64 guid = 18;
  if (this->_internal_guid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_guid());
  }

  // .Protobuf.ActiveSkillType ActiveSkillType = 17;
  if (this->_internal_activeskilltype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activeskilltype());
  }

  // int32 radius = 20;
  if (this->_internal_radius() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_radius());
  }

  // bool isResetting = 15;
  if (this->_internal_isresetting() != 0) {
    total_size += 1 + 1;
  }

  // bool canMove = 19;
  if (this->_internal_canmove() != 0) {
    total_size += 2 + 1;
  }

  // bool isInvisible = 26;
  if (this->_internal_isinvisible() != 0) {
    total_size += 2 + 1;
  }

  // int32 CD = 21;
  if (this->_internal_cd() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cd());
  }

  // int32 lifeNum = 22;
  if (this->_internal_lifenum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lifenum());
  }

  // int32 score = 23;
  if (this->_internal_score() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int64 teamID = 24;
  if (this->_internal_teamid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_teamid());
  }

  // int64 playerID = 25;
  if (this->_internal_playerid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageOfCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfCharacter::GetClassData() const { return &_class_data_; }

void MessageOfCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageOfCharacter *>(to)->MergeFrom(
      static_cast<const MessageOfCharacter &>(from));
}


void MessageOfCharacter::MergeFrom(const MessageOfCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageOfCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  buff_.MergeFrom(from.buff_);
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_attackrange = from._internal_attackrange();
  uint64_t raw_attackrange;
  memcpy(&raw_attackrange, &tmp_attackrange, sizeof(tmp_attackrange));
  if (raw_attackrange != 0) {
    _internal_set_attackrange(from._internal_attackrange());
  }
  if (from._internal_bulletnum() != 0) {
    _internal_set_bulletnum(from._internal_bulletnum());
  }
  if (from._internal_speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntilcommonskillavailable = from._internal_timeuntilcommonskillavailable();
  uint64_t raw_timeuntilcommonskillavailable;
  memcpy(&raw_timeuntilcommonskillavailable, &tmp_timeuntilcommonskillavailable, sizeof(tmp_timeuntilcommonskillavailable));
  if (raw_timeuntilcommonskillavailable != 0) {
    _internal_set_timeuntilcommonskillavailable(from._internal_timeuntilcommonskillavailable());
  }
  if (from._internal_life() != 0) {
    _internal_set_life(from._internal_life());
  }
  if (from._internal_gemnum() != 0) {
    _internal_set_gemnum(from._internal_gemnum());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntilultimateskillavailable = from._internal_timeuntilultimateskillavailable();
  uint64_t raw_timeuntilultimateskillavailable;
  memcpy(&raw_timeuntilultimateskillavailable, &tmp_timeuntilultimateskillavailable, sizeof(tmp_timeuntilultimateskillavailable));
  if (raw_timeuntilultimateskillavailable != 0) {
    _internal_set_timeuntilultimateskillavailable(from._internal_timeuntilultimateskillavailable());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = from._internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    _internal_set_facingdirection(from._internal_facingdirection());
  }
  if (from._internal_prop() != 0) {
    _internal_set_prop(from._internal_prop());
  }
  if (from._internal_place() != 0) {
    _internal_set_place(from._internal_place());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vampire = from._internal_vampire();
  uint64_t raw_vampire;
  memcpy(&raw_vampire, &tmp_vampire, sizeof(tmp_vampire));
  if (raw_vampire != 0) {
    _internal_set_vampire(from._internal_vampire());
  }
  if (from._internal_bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from._internal_passiveskilltype() != 0) {
    _internal_set_passiveskilltype(from._internal_passiveskilltype());
  }
  if (from._internal_guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from._internal_activeskilltype() != 0) {
    _internal_set_activeskilltype(from._internal_activeskilltype());
  }
  if (from._internal_radius() != 0) {
    _internal_set_radius(from._internal_radius());
  }
  if (from._internal_isresetting() != 0) {
    _internal_set_isresetting(from._internal_isresetting());
  }
  if (from._internal_canmove() != 0) {
    _internal_set_canmove(from._internal_canmove());
  }
  if (from._internal_isinvisible() != 0) {
    _internal_set_isinvisible(from._internal_isinvisible());
  }
  if (from._internal_cd() != 0) {
    _internal_set_cd(from._internal_cd());
  }
  if (from._internal_lifenum() != 0) {
    _internal_set_lifenum(from._internal_lifenum());
  }
  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfCharacter::CopyFrom(const MessageOfCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageOfCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfCharacter::IsInitialized() const {
  return true;
}

void MessageOfCharacter::InternalSwap(MessageOfCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buff_.InternalSwap(&other->buff_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfCharacter, playerid_)
      + sizeof(MessageOfCharacter::playerid_)
      - PROTOBUF_FIELD_OFFSET(MessageOfCharacter, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[0]);
}

// ===================================================================

class MessageOfProp::_Internal {
 public:
};

MessageOfProp::MessageOfProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageOfProp)
}
MessageOfProp::MessageOfProp(const MessageOfProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ismoving_) -
    reinterpret_cast<char*>(&type_)) + sizeof(ismoving_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageOfProp)
}

inline void MessageOfProp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ismoving_) -
    reinterpret_cast<char*>(&type_)) + sizeof(ismoving_));
}

MessageOfProp::~MessageOfProp() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageOfProp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageOfProp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfProp::ArenaDtor(void* object) {
  MessageOfProp* _this = reinterpret_cast< MessageOfProp* >(object);
  (void)_this;
}
void MessageOfProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOfProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageOfProp::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageOfProp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ismoving_) -
      reinterpret_cast<char*>(&type_)) + sizeof(ismoving_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protobuf.PropType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protobuf::PropType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double facingDirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          facingdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.PlaceType place = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_place(static_cast<::Protobuf::PlaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool isMoving = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ismoving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfProp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageOfProp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protobuf.PropType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // double facingDirection = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_facingdirection(), target);
  }

  // int64 guid = 5;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_guid(), target);
  }

  // int32 size = 6;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_size(), target);
  }

  // .Protobuf.PlaceType place = 7;
  if (this->_internal_place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_place(), target);
  }

  // bool isMoving = 8;
  if (this->_internal_ismoving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ismoving(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageOfProp)
  return target;
}

size_t MessageOfProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageOfProp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protobuf.PropType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // double facingDirection = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    total_size += 1 + 8;
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 size = 6;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  // int64 guid = 5;
  if (this->_internal_guid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
  }

  // .Protobuf.PlaceType place = 7;
  if (this->_internal_place() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_place());
  }

  // bool isMoving = 8;
  if (this->_internal_ismoving() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfProp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageOfProp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfProp::GetClassData() const { return &_class_data_; }

void MessageOfProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageOfProp *>(to)->MergeFrom(
      static_cast<const MessageOfProp &>(from));
}


void MessageOfProp::MergeFrom(const MessageOfProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageOfProp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = from._internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    _internal_set_facingdirection(from._internal_facingdirection());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from._internal_place() != 0) {
    _internal_set_place(from._internal_place());
  }
  if (from._internal_ismoving() != 0) {
    _internal_set_ismoving(from._internal_ismoving());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfProp::CopyFrom(const MessageOfProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageOfProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfProp::IsInitialized() const {
  return true;
}

void MessageOfProp::InternalSwap(MessageOfProp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfProp, ismoving_)
      + sizeof(MessageOfProp::ismoving_)
      - PROTOBUF_FIELD_OFFSET(MessageOfProp, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfProp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[1]);
}

// ===================================================================

class MessageOfBullet::_Internal {
 public:
};

MessageOfBullet::MessageOfBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageOfBullet)
}
MessageOfBullet::MessageOfBullet(const MessageOfBullet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bombrange_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bombrange_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageOfBullet)
}

inline void MessageOfBullet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bombrange_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bombrange_));
}

MessageOfBullet::~MessageOfBullet() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageOfBullet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageOfBullet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfBullet::ArenaDtor(void* object) {
  MessageOfBullet* _this = reinterpret_cast< MessageOfBullet* >(object);
  (void)_this;
}
void MessageOfBullet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOfBullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageOfBullet::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageOfBullet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bombrange_) -
      reinterpret_cast<char*>(&type_)) + sizeof(bombrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfBullet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protobuf.BulletType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protobuf::BulletType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double facingDirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          facingdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 parentTeamID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          parentteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.PlaceType place = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_place(static_cast<::Protobuf::PlaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // double bombRange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          bombrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfBullet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageOfBullet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protobuf.BulletType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // double facingDirection = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_facingdirection(), target);
  }

  // int64 guid = 5;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_guid(), target);
  }

  // int64 parentTeamID = 6;
  if (this->_internal_parentteamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_parentteamid(), target);
  }

  // .Protobuf.PlaceType place = 7;
  if (this->_internal_place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_place(), target);
  }

  // double bombRange = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bombrange = this->_internal_bombrange();
  uint64_t raw_bombrange;
  memcpy(&raw_bombrange, &tmp_bombrange, sizeof(tmp_bombrange));
  if (raw_bombrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_bombrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageOfBullet)
  return target;
}

size_t MessageOfBullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageOfBullet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protobuf.BulletType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // double facingDirection = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    total_size += 1 + 8;
  }

  // int64 guid = 5;
  if (this->_internal_guid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // .Protobuf.PlaceType place = 7;
  if (this->_internal_place() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_place());
  }

  // int64 parentTeamID = 6;
  if (this->_internal_parentteamid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_parentteamid());
  }

  // double bombRange = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bombrange = this->_internal_bombrange();
  uint64_t raw_bombrange;
  memcpy(&raw_bombrange, &tmp_bombrange, sizeof(tmp_bombrange));
  if (raw_bombrange != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfBullet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageOfBullet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfBullet::GetClassData() const { return &_class_data_; }

void MessageOfBullet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageOfBullet *>(to)->MergeFrom(
      static_cast<const MessageOfBullet &>(from));
}


void MessageOfBullet::MergeFrom(const MessageOfBullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageOfBullet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = from._internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    _internal_set_facingdirection(from._internal_facingdirection());
  }
  if (from._internal_guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_place() != 0) {
    _internal_set_place(from._internal_place());
  }
  if (from._internal_parentteamid() != 0) {
    _internal_set_parentteamid(from._internal_parentteamid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bombrange = from._internal_bombrange();
  uint64_t raw_bombrange;
  memcpy(&raw_bombrange, &tmp_bombrange, sizeof(tmp_bombrange));
  if (raw_bombrange != 0) {
    _internal_set_bombrange(from._internal_bombrange());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfBullet::CopyFrom(const MessageOfBullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageOfBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfBullet::IsInitialized() const {
  return true;
}

void MessageOfBullet::InternalSwap(MessageOfBullet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfBullet, bombrange_)
      + sizeof(MessageOfBullet::bombrange_)
      - PROTOBUF_FIELD_OFFSET(MessageOfBullet, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfBullet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[2]);
}

// ===================================================================

class MessageOfBombedBullet::_Internal {
 public:
};

MessageOfBombedBullet::MessageOfBombedBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageOfBombedBullet)
}
MessageOfBombedBullet::MessageOfBombedBullet(const MessageOfBombedBullet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageOfBombedBullet)
}

inline void MessageOfBombedBullet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(y_));
}

MessageOfBombedBullet::~MessageOfBombedBullet() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageOfBombedBullet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageOfBombedBullet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfBombedBullet::ArenaDtor(void* object) {
  MessageOfBombedBullet* _this = reinterpret_cast< MessageOfBombedBullet* >(object);
  (void)_this;
}
void MessageOfBombedBullet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOfBombedBullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageOfBombedBullet::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageOfBombedBullet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&type_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfBombedBullet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protobuf.BulletType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protobuf::BulletType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double facingDirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          facingdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 mappingID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          mappingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bombRange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          bombrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfBombedBullet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageOfBombedBullet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protobuf.BulletType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // double facingDirection = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_facingdirection(), target);
  }

  // int64 mappingID = 5;
  if (this->_internal_mappingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_mappingid(), target);
  }

  // double bombRange = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bombrange = this->_internal_bombrange();
  uint64_t raw_bombrange;
  memcpy(&raw_bombrange, &tmp_bombrange, sizeof(tmp_bombrange));
  if (raw_bombrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_bombrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageOfBombedBullet)
  return target;
}

size_t MessageOfBombedBullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageOfBombedBullet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protobuf.BulletType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // double facingDirection = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    total_size += 1 + 8;
  }

  // int64 mappingID = 5;
  if (this->_internal_mappingid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_mappingid());
  }

  // double bombRange = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bombrange = this->_internal_bombrange();
  uint64_t raw_bombrange;
  memcpy(&raw_bombrange, &tmp_bombrange, sizeof(tmp_bombrange));
  if (raw_bombrange != 0) {
    total_size += 1 + 8;
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfBombedBullet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageOfBombedBullet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfBombedBullet::GetClassData() const { return &_class_data_; }

void MessageOfBombedBullet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageOfBombedBullet *>(to)->MergeFrom(
      static_cast<const MessageOfBombedBullet &>(from));
}


void MessageOfBombedBullet::MergeFrom(const MessageOfBombedBullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageOfBombedBullet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = from._internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    _internal_set_facingdirection(from._internal_facingdirection());
  }
  if (from._internal_mappingid() != 0) {
    _internal_set_mappingid(from._internal_mappingid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bombrange = from._internal_bombrange();
  uint64_t raw_bombrange;
  memcpy(&raw_bombrange, &tmp_bombrange, sizeof(tmp_bombrange));
  if (raw_bombrange != 0) {
    _internal_set_bombrange(from._internal_bombrange());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfBombedBullet::CopyFrom(const MessageOfBombedBullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageOfBombedBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfBombedBullet::IsInitialized() const {
  return true;
}

void MessageOfBombedBullet::InternalSwap(MessageOfBombedBullet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfBombedBullet, y_)
      + sizeof(MessageOfBombedBullet::y_)
      - PROTOBUF_FIELD_OFFSET(MessageOfBombedBullet, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfBombedBullet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[3]);
}

// ===================================================================

class MessageOfPickedProp::_Internal {
 public:
};

MessageOfPickedProp::MessageOfPickedProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageOfPickedProp)
}
MessageOfPickedProp::MessageOfPickedProp(const MessageOfPickedProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageOfPickedProp)
}

inline void MessageOfPickedProp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(y_));
}

MessageOfPickedProp::~MessageOfPickedProp() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageOfPickedProp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageOfPickedProp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfPickedProp::ArenaDtor(void* object) {
  MessageOfPickedProp* _this = reinterpret_cast< MessageOfPickedProp* >(object);
  (void)_this;
}
void MessageOfPickedProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOfPickedProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageOfPickedProp::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageOfPickedProp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&type_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfPickedProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protobuf.PropType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protobuf::PropType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double facingDirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          facingdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 mappingID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          mappingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfPickedProp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageOfPickedProp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protobuf.PropType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // double facingDirection = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_facingdirection(), target);
  }

  // int64 mappingID = 5;
  if (this->_internal_mappingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_mappingid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageOfPickedProp)
  return target;
}

size_t MessageOfPickedProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageOfPickedProp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protobuf.PropType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // double facingDirection = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = this->_internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    total_size += 1 + 8;
  }

  // int64 mappingID = 5;
  if (this->_internal_mappingid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_mappingid());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfPickedProp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageOfPickedProp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfPickedProp::GetClassData() const { return &_class_data_; }

void MessageOfPickedProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageOfPickedProp *>(to)->MergeFrom(
      static_cast<const MessageOfPickedProp &>(from));
}


void MessageOfPickedProp::MergeFrom(const MessageOfPickedProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageOfPickedProp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facingdirection = from._internal_facingdirection();
  uint64_t raw_facingdirection;
  memcpy(&raw_facingdirection, &tmp_facingdirection, sizeof(tmp_facingdirection));
  if (raw_facingdirection != 0) {
    _internal_set_facingdirection(from._internal_facingdirection());
  }
  if (from._internal_mappingid() != 0) {
    _internal_set_mappingid(from._internal_mappingid());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfPickedProp::CopyFrom(const MessageOfPickedProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageOfPickedProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfPickedProp::IsInitialized() const {
  return true;
}

void MessageOfPickedProp::InternalSwap(MessageOfPickedProp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfPickedProp, y_)
      + sizeof(MessageOfPickedProp::y_)
      - PROTOBUF_FIELD_OFFSET(MessageOfPickedProp, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfPickedProp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[4]);
}

// ===================================================================

class MessageOfMap_Row::_Internal {
 public:
};

MessageOfMap_Row::MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  col_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageOfMap.Row)
}
MessageOfMap_Row::MessageOfMap_Row(const MessageOfMap_Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      col_(from.col_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageOfMap.Row)
}

inline void MessageOfMap_Row::SharedCtor() {
}

MessageOfMap_Row::~MessageOfMap_Row() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageOfMap.Row)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageOfMap_Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfMap_Row::ArenaDtor(void* object) {
  MessageOfMap_Row* _this = reinterpret_cast< MessageOfMap_Row* >(object);
  (void)_this;
}
void MessageOfMap_Row::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOfMap_Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageOfMap_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageOfMap.Row)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfMap_Row::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 col = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_col(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_col(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfMap_Row::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageOfMap.Row)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 col = 1;
  {
    int byte_size = _col_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_col(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageOfMap.Row)
  return target;
}

size_t MessageOfMap_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageOfMap.Row)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 col = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->col_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _col_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap_Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageOfMap_Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfMap_Row::GetClassData() const { return &_class_data_; }

void MessageOfMap_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageOfMap_Row *>(to)->MergeFrom(
      static_cast<const MessageOfMap_Row &>(from));
}


void MessageOfMap_Row::MergeFrom(const MessageOfMap_Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageOfMap.Row)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  col_.MergeFrom(from.col_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfMap_Row::CopyFrom(const MessageOfMap_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageOfMap.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfMap_Row::IsInitialized() const {
  return true;
}

void MessageOfMap_Row::InternalSwap(MessageOfMap_Row* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  col_.InternalSwap(&other->col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap_Row::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[5]);
}

// ===================================================================

class MessageOfMap::_Internal {
 public:
};

MessageOfMap::MessageOfMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageOfMap)
}
MessageOfMap::MessageOfMap(const MessageOfMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_(from.row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageOfMap)
}

inline void MessageOfMap::SharedCtor() {
}

MessageOfMap::~MessageOfMap() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageOfMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageOfMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfMap::ArenaDtor(void* object) {
  MessageOfMap* _this = reinterpret_cast< MessageOfMap* >(object);
  (void)_this;
}
void MessageOfMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOfMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageOfMap::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageOfMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protobuf.MessageOfMap.Row row = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageOfMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protobuf.MessageOfMap.Row row = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, this->_internal_row(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageOfMap)
  return target;
}

size_t MessageOfMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageOfMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protobuf.MessageOfMap.Row row = 51;
  total_size += 2UL * this->_internal_row_size();
  for (const auto& msg : this->row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageOfMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfMap::GetClassData() const { return &_class_data_; }

void MessageOfMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageOfMap *>(to)->MergeFrom(
      static_cast<const MessageOfMap &>(from));
}


void MessageOfMap::MergeFrom(const MessageOfMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageOfMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  row_.MergeFrom(from.row_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfMap::CopyFrom(const MessageOfMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageOfMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfMap::IsInitialized() const {
  return true;
}

void MessageOfMap::InternalSwap(MessageOfMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_.InternalSwap(&other->row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[6]);
}

// ===================================================================

class MessageToClient_GameObjMessage::_Internal {
 public:
  static const ::Protobuf::MessageOfCharacter& messageofcharacter(const MessageToClient_GameObjMessage* msg);
  static const ::Protobuf::MessageOfBullet& messageofbullet(const MessageToClient_GameObjMessage* msg);
  static const ::Protobuf::MessageOfProp& messageofprop(const MessageToClient_GameObjMessage* msg);
  static const ::Protobuf::MessageOfMap& messageofmap(const MessageToClient_GameObjMessage* msg);
  static const ::Protobuf::MessageOfBombedBullet& messageofbombedbullet(const MessageToClient_GameObjMessage* msg);
  static const ::Protobuf::MessageOfPickedProp& messageofpickedprop(const MessageToClient_GameObjMessage* msg);
};

const ::Protobuf::MessageOfCharacter&
MessageToClient_GameObjMessage::_Internal::messageofcharacter(const MessageToClient_GameObjMessage* msg) {
  return *msg->obj_.messageofcharacter_;
}
const ::Protobuf::MessageOfBullet&
MessageToClient_GameObjMessage::_Internal::messageofbullet(const MessageToClient_GameObjMessage* msg) {
  return *msg->obj_.messageofbullet_;
}
const ::Protobuf::MessageOfProp&
MessageToClient_GameObjMessage::_Internal::messageofprop(const MessageToClient_GameObjMessage* msg) {
  return *msg->obj_.messageofprop_;
}
const ::Protobuf::MessageOfMap&
MessageToClient_GameObjMessage::_Internal::messageofmap(const MessageToClient_GameObjMessage* msg) {
  return *msg->obj_.messageofmap_;
}
const ::Protobuf::MessageOfBombedBullet&
MessageToClient_GameObjMessage::_Internal::messageofbombedbullet(const MessageToClient_GameObjMessage* msg) {
  return *msg->obj_.messageofbombedbullet_;
}
const ::Protobuf::MessageOfPickedProp&
MessageToClient_GameObjMessage::_Internal::messageofpickedprop(const MessageToClient_GameObjMessage* msg) {
  return *msg->obj_.messageofpickedprop_;
}
void MessageToClient_GameObjMessage::set_allocated_messageofcharacter(::Protobuf::MessageOfCharacter* messageofcharacter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_obj();
  if (messageofcharacter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protobuf::MessageOfCharacter>::GetOwningArena(messageofcharacter);
    if (message_arena != submessage_arena) {
      messageofcharacter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageofcharacter, submessage_arena);
    }
    set_has_messageofcharacter();
    obj_.messageofcharacter_ = messageofcharacter;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToClient.GameObjMessage.messageOfCharacter)
}
void MessageToClient_GameObjMessage::set_allocated_messageofbullet(::Protobuf::MessageOfBullet* messageofbullet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_obj();
  if (messageofbullet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protobuf::MessageOfBullet>::GetOwningArena(messageofbullet);
    if (message_arena != submessage_arena) {
      messageofbullet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageofbullet, submessage_arena);
    }
    set_has_messageofbullet();
    obj_.messageofbullet_ = messageofbullet;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToClient.GameObjMessage.messageOfBullet)
}
void MessageToClient_GameObjMessage::set_allocated_messageofprop(::Protobuf::MessageOfProp* messageofprop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_obj();
  if (messageofprop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protobuf::MessageOfProp>::GetOwningArena(messageofprop);
    if (message_arena != submessage_arena) {
      messageofprop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageofprop, submessage_arena);
    }
    set_has_messageofprop();
    obj_.messageofprop_ = messageofprop;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToClient.GameObjMessage.messageOfProp)
}
void MessageToClient_GameObjMessage::set_allocated_messageofmap(::Protobuf::MessageOfMap* messageofmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_obj();
  if (messageofmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protobuf::MessageOfMap>::GetOwningArena(messageofmap);
    if (message_arena != submessage_arena) {
      messageofmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageofmap, submessage_arena);
    }
    set_has_messageofmap();
    obj_.messageofmap_ = messageofmap;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToClient.GameObjMessage.messageOfMap)
}
void MessageToClient_GameObjMessage::set_allocated_messageofbombedbullet(::Protobuf::MessageOfBombedBullet* messageofbombedbullet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_obj();
  if (messageofbombedbullet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protobuf::MessageOfBombedBullet>::GetOwningArena(messageofbombedbullet);
    if (message_arena != submessage_arena) {
      messageofbombedbullet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageofbombedbullet, submessage_arena);
    }
    set_has_messageofbombedbullet();
    obj_.messageofbombedbullet_ = messageofbombedbullet;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToClient.GameObjMessage.MessageOfBombedBullet)
}
void MessageToClient_GameObjMessage::set_allocated_messageofpickedprop(::Protobuf::MessageOfPickedProp* messageofpickedprop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_obj();
  if (messageofpickedprop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protobuf::MessageOfPickedProp>::GetOwningArena(messageofpickedprop);
    if (message_arena != submessage_arena) {
      messageofpickedprop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageofpickedprop, submessage_arena);
    }
    set_has_messageofpickedprop();
    obj_.messageofpickedprop_ = messageofpickedprop;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToClient.GameObjMessage.messageOfPickedProp)
}
MessageToClient_GameObjMessage::MessageToClient_GameObjMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageToClient.GameObjMessage)
}
MessageToClient_GameObjMessage::MessageToClient_GameObjMessage(const MessageToClient_GameObjMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_obj();
  switch (from.obj_case()) {
    case kMessageOfCharacter: {
      _internal_mutable_messageofcharacter()->::Protobuf::MessageOfCharacter::MergeFrom(from._internal_messageofcharacter());
      break;
    }
    case kMessageOfBullet: {
      _internal_mutable_messageofbullet()->::Protobuf::MessageOfBullet::MergeFrom(from._internal_messageofbullet());
      break;
    }
    case kMessageOfProp: {
      _internal_mutable_messageofprop()->::Protobuf::MessageOfProp::MergeFrom(from._internal_messageofprop());
      break;
    }
    case kMessageOfMap: {
      _internal_mutable_messageofmap()->::Protobuf::MessageOfMap::MergeFrom(from._internal_messageofmap());
      break;
    }
    case kMessageOfBombedBullet: {
      _internal_mutable_messageofbombedbullet()->::Protobuf::MessageOfBombedBullet::MergeFrom(from._internal_messageofbombedbullet());
      break;
    }
    case kMessageOfPickedProp: {
      _internal_mutable_messageofpickedprop()->::Protobuf::MessageOfPickedProp::MergeFrom(from._internal_messageofpickedprop());
      break;
    }
    case OBJ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToClient.GameObjMessage)
}

inline void MessageToClient_GameObjMessage::SharedCtor() {
clear_has_obj();
}

MessageToClient_GameObjMessage::~MessageToClient_GameObjMessage() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToClient.GameObjMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageToClient_GameObjMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_obj()) {
    clear_obj();
  }
}

void MessageToClient_GameObjMessage::ArenaDtor(void* object) {
  MessageToClient_GameObjMessage* _this = reinterpret_cast< MessageToClient_GameObjMessage* >(object);
  (void)_this;
}
void MessageToClient_GameObjMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToClient_GameObjMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageToClient_GameObjMessage::clear_obj() {
// @@protoc_insertion_point(one_of_clear_start:Protobuf.MessageToClient.GameObjMessage)
  switch (obj_case()) {
    case kMessageOfCharacter: {
      if (GetArenaForAllocation() == nullptr) {
        delete obj_.messageofcharacter_;
      }
      break;
    }
    case kMessageOfBullet: {
      if (GetArenaForAllocation() == nullptr) {
        delete obj_.messageofbullet_;
      }
      break;
    }
    case kMessageOfProp: {
      if (GetArenaForAllocation() == nullptr) {
        delete obj_.messageofprop_;
      }
      break;
    }
    case kMessageOfMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete obj_.messageofmap_;
      }
      break;
    }
    case kMessageOfBombedBullet: {
      if (GetArenaForAllocation() == nullptr) {
        delete obj_.messageofbombedbullet_;
      }
      break;
    }
    case kMessageOfPickedProp: {
      if (GetArenaForAllocation() == nullptr) {
        delete obj_.messageofpickedprop_;
      }
      break;
    }
    case OBJ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJ_NOT_SET;
}


void MessageToClient_GameObjMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToClient.GameObjMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_obj();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClient_GameObjMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protobuf.MessageOfCharacter messageOfCharacter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageofcharacter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.MessageOfBullet messageOfBullet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageofbullet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.MessageOfProp messageOfProp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageofprop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.MessageOfMap messageOfMap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageofmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.MessageOfBombedBullet MessageOfBombedBullet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageofbombedbullet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.MessageOfPickedProp messageOfPickedProp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageofpickedprop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToClient_GameObjMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToClient.GameObjMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protobuf.MessageOfCharacter messageOfCharacter = 1;
  if (_internal_has_messageofcharacter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::messageofcharacter(this), target, stream);
  }

  // .Protobuf.MessageOfBullet messageOfBullet = 2;
  if (_internal_has_messageofbullet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::messageofbullet(this), target, stream);
  }

  // .Protobuf.MessageOfProp messageOfProp = 3;
  if (_internal_has_messageofprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::messageofprop(this), target, stream);
  }

  // .Protobuf.MessageOfMap messageOfMap = 4;
  if (_internal_has_messageofmap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::messageofmap(this), target, stream);
  }

  // .Protobuf.MessageOfBombedBullet MessageOfBombedBullet = 5;
  if (_internal_has_messageofbombedbullet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::messageofbombedbullet(this), target, stream);
  }

  // .Protobuf.MessageOfPickedProp messageOfPickedProp = 6;
  if (_internal_has_messageofpickedprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::messageofpickedprop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToClient.GameObjMessage)
  return target;
}

size_t MessageToClient_GameObjMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToClient.GameObjMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (obj_case()) {
    // .Protobuf.MessageOfCharacter messageOfCharacter = 1;
    case kMessageOfCharacter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_.messageofcharacter_);
      break;
    }
    // .Protobuf.MessageOfBullet messageOfBullet = 2;
    case kMessageOfBullet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_.messageofbullet_);
      break;
    }
    // .Protobuf.MessageOfProp messageOfProp = 3;
    case kMessageOfProp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_.messageofprop_);
      break;
    }
    // .Protobuf.MessageOfMap messageOfMap = 4;
    case kMessageOfMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_.messageofmap_);
      break;
    }
    // .Protobuf.MessageOfBombedBullet MessageOfBombedBullet = 5;
    case kMessageOfBombedBullet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_.messageofbombedbullet_);
      break;
    }
    // .Protobuf.MessageOfPickedProp messageOfPickedProp = 6;
    case kMessageOfPickedProp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_.messageofpickedprop_);
      break;
    }
    case OBJ_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToClient_GameObjMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageToClient_GameObjMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToClient_GameObjMessage::GetClassData() const { return &_class_data_; }

void MessageToClient_GameObjMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageToClient_GameObjMessage *>(to)->MergeFrom(
      static_cast<const MessageToClient_GameObjMessage &>(from));
}


void MessageToClient_GameObjMessage::MergeFrom(const MessageToClient_GameObjMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToClient.GameObjMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.obj_case()) {
    case kMessageOfCharacter: {
      _internal_mutable_messageofcharacter()->::Protobuf::MessageOfCharacter::MergeFrom(from._internal_messageofcharacter());
      break;
    }
    case kMessageOfBullet: {
      _internal_mutable_messageofbullet()->::Protobuf::MessageOfBullet::MergeFrom(from._internal_messageofbullet());
      break;
    }
    case kMessageOfProp: {
      _internal_mutable_messageofprop()->::Protobuf::MessageOfProp::MergeFrom(from._internal_messageofprop());
      break;
    }
    case kMessageOfMap: {
      _internal_mutable_messageofmap()->::Protobuf::MessageOfMap::MergeFrom(from._internal_messageofmap());
      break;
    }
    case kMessageOfBombedBullet: {
      _internal_mutable_messageofbombedbullet()->::Protobuf::MessageOfBombedBullet::MergeFrom(from._internal_messageofbombedbullet());
      break;
    }
    case kMessageOfPickedProp: {
      _internal_mutable_messageofpickedprop()->::Protobuf::MessageOfPickedProp::MergeFrom(from._internal_messageofpickedprop());
      break;
    }
    case OBJ_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToClient_GameObjMessage::CopyFrom(const MessageToClient_GameObjMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToClient.GameObjMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient_GameObjMessage::IsInitialized() const {
  return true;
}

void MessageToClient_GameObjMessage::InternalSwap(MessageToClient_GameObjMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(obj_, other->obj_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient_GameObjMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[7]);
}

// ===================================================================

class MessageToClient::_Internal {
 public:
};

MessageToClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gameobjmessage_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageToClient)
}
MessageToClient::MessageToClient(const MessageToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gameobjmessage_(from.gameobjmessage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToClient)
}

inline void MessageToClient::SharedCtor() {
messagetype_ = 0;
}

MessageToClient::~MessageToClient() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageToClient::ArenaDtor(void* object) {
  MessageToClient* _this = reinterpret_cast< MessageToClient* >(object);
  (void)_this;
}
void MessageToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameobjmessage_.Clear();
  messagetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protobuf.MessageToClient.GameObjMessage gameObjMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameobjmessage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.MessageType messageType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::Protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protobuf.MessageToClient.GameObjMessage gameObjMessage = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gameobjmessage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gameobjmessage(i), target, stream);
  }

  // .Protobuf.MessageType messageType = 2;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_messagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToClient)
  return target;
}

size_t MessageToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protobuf.MessageToClient.GameObjMessage gameObjMessage = 1;
  total_size += 1UL * this->_internal_gameobjmessage_size();
  for (const auto& msg : this->gameobjmessage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protobuf.MessageType messageType = 2;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageToClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToClient::GetClassData() const { return &_class_data_; }

void MessageToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageToClient *>(to)->MergeFrom(
      static_cast<const MessageToClient &>(from));
}


void MessageToClient::MergeFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToClient)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gameobjmessage_.MergeFrom(from.gameobjmessage_);
  if (from._internal_messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToClient::CopyFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient::IsInitialized() const {
  return true;
}

void MessageToClient::InternalSwap(MessageToClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gameobjmessage_.InternalSwap(&other->gameobjmessage_);
  swap(messagetype_, other->messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[8]);
}

// ===================================================================

class MessageToOneClient::_Internal {
 public:
};

MessageToOneClient::MessageToOneClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protobuf.MessageToOneClient)
}
MessageToOneClient::MessageToOneClient(const MessageToOneClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&messagetype_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(messagetype_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToOneClient)
}

inline void MessageToOneClient::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&messagetype_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(messagetype_));
}

MessageToOneClient::~MessageToOneClient() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToOneClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageToOneClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageToOneClient::ArenaDtor(void* object) {
  MessageToOneClient* _this = reinterpret_cast< MessageToOneClient* >(object);
  (void)_this;
}
void MessageToOneClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToOneClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageToOneClient::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToOneClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messagetype_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(messagetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToOneClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 teamID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protobuf.MessageType messageType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::Protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protobuf.MessageToOneClient.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToOneClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToOneClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // int64 teamID = 2;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_teamid(), target);
  }

  // .Protobuf.MessageType messageType = 3;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_messagetype(), target);
  }

  // int64 guid = 4;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_guid(), target);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protobuf.MessageToOneClient.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToOneClient)
  return target;
}

size_t MessageToOneClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToOneClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // int64 teamID = 2;
  if (this->_internal_teamid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_teamid());
  }

  // int64 guid = 4;
  if (this->_internal_guid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
  }

  // .Protobuf.MessageType messageType = 3;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToOneClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageToOneClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToOneClient::GetClassData() const { return &_class_data_; }

void MessageToOneClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageToOneClient *>(to)->MergeFrom(
      static_cast<const MessageToOneClient &>(from));
}


void MessageToOneClient::MergeFrom(const MessageToOneClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToOneClient)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from._internal_messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToOneClient::CopyFrom(const MessageToOneClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToOneClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToOneClient::IsInitialized() const {
  return true;
}

void MessageToOneClient::InternalSwap(MessageToOneClient* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageToOneClient, messagetype_)
      + sizeof(MessageToOneClient::messagetype_)
      - PROTOBUF_FIELD_OFFSET(MessageToOneClient, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToOneClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protobuf::MessageOfCharacter* Arena::CreateMaybeMessage< ::Protobuf::MessageOfCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageOfCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageOfProp* Arena::CreateMaybeMessage< ::Protobuf::MessageOfProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageOfProp >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageOfBullet* Arena::CreateMaybeMessage< ::Protobuf::MessageOfBullet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageOfBullet >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageOfBombedBullet* Arena::CreateMaybeMessage< ::Protobuf::MessageOfBombedBullet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageOfBombedBullet >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageOfPickedProp* Arena::CreateMaybeMessage< ::Protobuf::MessageOfPickedProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageOfPickedProp >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageOfMap_Row* Arena::CreateMaybeMessage< ::Protobuf::MessageOfMap_Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageOfMap_Row >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageOfMap* Arena::CreateMaybeMessage< ::Protobuf::MessageOfMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageOfMap >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToClient_GameObjMessage* Arena::CreateMaybeMessage< ::Protobuf::MessageToClient_GameObjMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageToClient_GameObjMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToClient* Arena::CreateMaybeMessage< ::Protobuf::MessageToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToOneClient* Arena::CreateMaybeMessage< ::Protobuf::MessageToOneClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protobuf::MessageToOneClient >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
